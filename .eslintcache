[{"E:\\bootcamp 2020\\Quiz app\\quizapp\\src\\index.tsx":"1","E:\\bootcamp 2020\\Quiz app\\quizapp\\src\\reportWebVitals.ts":"2","E:\\bootcamp 2020\\Quiz app\\quizapp\\src\\App.tsx":"3","E:\\bootcamp 2020\\Quiz app\\quizapp\\src\\services\\quiz_services.ts":"4","E:\\bootcamp 2020\\Quiz app\\quizapp\\src\\Types\\quiz_types.ts":"5","E:\\bootcamp 2020\\Quiz app\\quizapp\\src\\components\\QuestionCard.tsx":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":1768,"mtime":1612290154133,"results":"10","hashOfConfig":"8"},{"size":808,"mtime":1612285994419,"results":"11","hashOfConfig":"8"},{"size":444,"mtime":1612203314006,"results":"12","hashOfConfig":"8"},{"size":1726,"mtime":1612288447794,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"165j1hw",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"E:\\bootcamp 2020\\Quiz app\\quizapp\\src\\index.tsx",[],["31","32"],"E:\\bootcamp 2020\\Quiz app\\quizapp\\src\\reportWebVitals.ts",[],"E:\\bootcamp 2020\\Quiz app\\quizapp\\src\\App.tsx",["33"],"import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { getQuizDetails } from './services/quiz_services'\nimport { QuestionType, Quiz } from './Types/quiz_types'\nimport QustionCard from './components/QuestionCard'\n\nfunction App() {\n\n  let [quiz, setquiz] = useState<QuestionType[]>([])\n  let [currentStep, setCurrentStep] = useState(0)\n  let [score, setScore] = useState(0)\n  let [showResult, setShowResult] = useState(false)\n\n  useEffect(() => {\n\n    async function fetchData() {\n\n      const questions: QuestionType[] = await getQuizDetails(5, 'easy');\n      console.log(questions)\n      setquiz(questions)\n    }\n    fetchData();\n\n  }, [])\n\n  const handleSubmit = (e: React.FormEvent<EventTarget>, userAns: string) => {\n    e.preventDefault();\n\n    const currentQuestion: QuestionType = quiz[currentStep]\n\n    console.log(\"correct ans: \" + currentQuestion.correct_answer + \"--user Selection :\" + userAns)\n\n\n    if (userAns === currentQuestion.correct_answer) {\n\n      setScore(++score)\n    }\n\n    if (currentStep !== quiz.length - 1)\n      setCurrentStep(++currentStep)\n    else {\n      // alert(\" YOUR FINAL SCORE IS : \" + score + \"OUT OF : \" + quiz.length)\n      setShowResult(true)\n    }\n  }\n\n  if (!quiz.length)\n    return <h3>Looding ..</h3>\n  if (showResult) {\n    return (\n      <div className={\"question_Container result-container\"}>\n        <h1>Result</h1>\n        <p>YOUR FINAL SCORE IS\n           <b>  {score}</b> OUT OF  <b>{quiz.length}</b>\n        </p>\n      </div>\n    )\n  }\n  return (\n    <div className=\"App\">\n\n      <h1>Quiz App</h1>\n      <QustionCard\n\n        options={quiz[currentStep].option}\n        question={quiz[currentStep].question}\n        callback={handleSubmit}\n\n      />\n    </div>\n  );\n}\n\nexport default App;\n","E:\\bootcamp 2020\\Quiz app\\quizapp\\src\\services\\quiz_services.ts",[],"E:\\bootcamp 2020\\Quiz app\\quizapp\\src\\Types\\quiz_types.ts",["34"],"import { type } from \"os\";\r\n\r\nexport type Quiz = {\r\n\r\n    category: string\r\n    correct_answer: string\r\n    difficulty: string\r\n    incorrect_answers: string[]\r\n    question: string\r\n    type: string\r\n}\r\n\r\n\r\nexport type QuestionType = {\r\n    question: string\r\n    answer: string\r\n    option: string\r\n}\r\n\r\n\r\ntype questionPropsTypes={\r\n\r\n    question:string\r\n    options :string[]\r\n}\r\n\r\n",["35","36"],"E:\\bootcamp 2020\\Quiz app\\quizapp\\src\\components\\QuestionCard.tsx",[],["37","38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":4,"column":24,"nodeType":"45","messageId":"46","endLine":4,"endColumn":28},{"ruleId":"43","severity":1,"message":"47","line":1,"column":10,"nodeType":"45","messageId":"46","endLine":1,"endColumn":14},{"ruleId":"39","replacedBy":"48"},{"ruleId":"41","replacedBy":"49"},{"ruleId":"39","replacedBy":"50"},{"ruleId":"41","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"@typescript-eslint/no-unused-vars","'Quiz' is defined but never used.","Identifier","unusedVar","'type' is defined but never used.",["52"],["53"],["52"],["53"],"no-global-assign","no-unsafe-negation"]